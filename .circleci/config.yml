version: 2.1
executors:
  codecov-deploy:
    docker:
      - image: us-docker.pkg.dev/test6u3411ty6xqh462sri/codecov-devops/codecov-deploy:latest
        user: root
        auth:
          username: _json_key
          password: $GCLOUD_SERVICE_KEY
    working_directory: /work
  codecov-worker:
    docker:
      - image: gcr.io/test6u3411ty6xqh462sri/codecov-worker:latest
        user: root
        auth:
          username: _json_key
          password: $GCLOUD_SERVICE_KEY
      - image: circleci/postgres:9.6.2
        name: postgres
    working_directory: /worker

gcloud_auth: &gcloud_auth
  name: Copy gcloud auth for docker push
  command: |-
    echo "$GCLOUD_SERVICE_KEY" > service.json
    gcloud auth activate-service-account --key-file=service.json
    gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
    gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
    gcloud auth configure-docker

gcloud_auth_enterprise: &gcloud_auth_enterprise
  name: Copy gcloud auth for docker push
  command: |-
    echo "$GCLOUD_SERVICE_KEY" > service.json
    gcloud auth activate-service-account --key-file=service.json
    gcloud --quiet config set project ${GOOGLE_ENTERPRISE_PROJECT_ID}
    gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
    gcloud auth configure-docker

jobs:
  linter:
    docker:
      - image: circleci/python:3.7.6
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Running linter
          command: |
            echo "Installing..."
            pip3 install black==22.3.0 isort
            echo "Linting..."
            black --check .
            echo "Sorting..."
            isort --profile black --check .
  build:
    executor: codecov-deploy
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.7
      - run:
          <<: *gcloud_auth
      - run:
          name: build container
          command: |-
            make -f Makefile.circle build-requirements GH_ACCESS_TOKEN=$GH_ACCESS_TOKEN
            make -f Makefile.circle build VERSION=$CIRCLE_TAG
            make -f Makefile.circle push
  codecovstartup:
    executor: codecov-worker
    steps:
      - run:
          name: Setup
          command: |
            apk add git build-base
      - checkout
      - run:
          name: Install CLI
          command: |
            pip install codecov-cli
      - run:
          name: Save commit info 
          command: |
            codecovcli create-commit 
      - run: 
          name: Create report
          command: |
            codecovcli create-report 
      - run:
          name: Run Static Analysis
          command: |
            codecovcli static-analysis --token=$STATIC_TOKEN
  iterativetesting:
    executor: codecov-worker
    steps:
      - run:
          name: Run Predictor Analysis
          command: |
            apk add git build-base
            pip install codecov-cli
            echo $(git merge-base HEAD^ master)
            codecovcli label-analysis --token=$STATIC_TOKEN --base-sha=$(git merge-base HEAD^ master)
            coverage json --show-contexts -o label.coverage.json
            codecovcli do-upload --flag onlysomelabels --file=label.coverage.json
  mutations:
    executor: codecov-worker
    steps:
      - checkout
      - run:
          name: Run Mutations
          command: |
            apk add git
            git diff master $CIRCLE_SHA1 > data.patch
            pip install mutmut[patch]
            mutmut run --use-patch-file data.patch || true
            mkdir /tmp/artifacts;
            mutmut junitxml > /tmp/artifacts/mut.xml
      - store_test_results:
          path: /tmp/artifacts/mut.xml
  build-enterprise:
    executor: codecov-deploy
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.7
      - run: |
          ssh remote-docker \<<EOF
            sudo bash -c 'echo "{\"experimental\": true}" > /etc/docker/daemon.json'
            sudo systemctl restart docker
          EOF
      - run:
          <<: *gcloud_auth_enterprise
      - run:
          name: build container
          command: |-
            make -f Makefile.circle build-requirements
            make -f Makefile.circle build-enterprise VERSION=$CIRCLE_TAG
            make -f Makefile.circle build-enterprise-runtime VERSION=$CIRCLE_TAG
            make -f Makefile.circle push-enterprise
  test:
    executor: codecov-worker
    steps:
      - checkout
      - run:
          name: verify postgres is up
          command: |
            while ! nc -vz postgres 5432; do sleep 1; echo "waiting for postgres"; done
      - run:
          name: run tests
          command: |
            make test.unit
            make test.integration    
      - run:
          name: upload to codecov using python uploader
          command: |
            apk add git build-base
            pip install codecov-cli
            codecovcli do-upload --flag latest-uploader-overall 
            codecovcli do-upload --flag unit --file unit.coverage.xml
            codecovcli do-upload --flag integration --file integration.coverage.xml

  staging:
    executor: codecov-deploy
    environment:
      SENTRY_ORG: codecov
      SENTRY_PROJECT: python-3x-worker
      SENTRY_ENVIRONMENT: staging
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.7
      - run:
          <<: *gcloud_auth
      - run:
          name: docker build, tag, and upload to staging
          command: |
            make -f Makefile.circle staging
      - run:
          name: Create release and notify Sentry of deploy
          command: |
            curl -sL https://sentry.io/get-cli/ | bash
            export SENTRY_RELEASE=$SENTRY_ENVIRONMENT-release-$(git rev-parse --short=7 HEAD)
            sentry-cli releases new -p $SENTRY_PROJECT $SENTRY_RELEASE
            sentry-cli releases set-commits $SENTRY_RELEASE --auto
            sentry-cli releases finalize $SENTRY_RELEASE
            sentry-cli releases deploys $SENTRY_RELEASE new -e $SENTRY_ENVIRONMENT 

  production:
    executor: codecov-deploy
    environment:
      SENTRY_ORG: codecov
      SENTRY_PROJECT: python-3x-worker
      SENTRY_ENVIRONMENT: production
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.7
      - run:
          <<: *gcloud_auth
      - run:
          name: docker build, tag, and upload to production
          command: |
            make -f Makefile.circle production
      - run:
          name: Create release and notify Sentry of deploy
          command: |
            curl -sL https://sentry.io/get-cli/ | bash
            export SENTRY_RELEASE=$SENTRY_ENVIRONMENT-release-$(git rev-parse --short=7 HEAD)
            sentry-cli releases new -p $SENTRY_PROJECT $SENTRY_RELEASE
            sentry-cli releases set-commits $SENTRY_RELEASE --auto
            sentry-cli releases finalize $SENTRY_RELEASE
            sentry-cli releases deploys $SENTRY_RELEASE new -e $SENTRY_ENVIRONMENT 
  enterprise:
    executor: codecov-deploy
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.7
      - run:
          <<: *gcloud_auth_enterprise
      - run: echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKER_USERNAME" --password-stdin
      - run:
          name: docker build, tag, and upload to enterprise qa
          command: |
            make -B -f Makefile.circle enterprise
  enterprise-release:
    executor: codecov-deploy
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.7
      - run:
          <<: *gcloud_auth_enterprise
      - run: echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKER_USERNAME" --password-stdin
      - run:
          name: Release Enterprise to Dockerhub
          command: |
            make -B -f Makefile.circle release-enterprise
  deploy:
    executor: codecov-deploy
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.7
      - run:
          <<: *gcloud_auth
      - run:
          name: tag for k8s
          command: |-
            make -f Makefile.circle tag
  dockerhub:
    executor: codecov-deploy
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.7
      - run:
          name: Pull Latest Worker Image and Deploy to DockerHub
          command: |
            docker login -u _json_key -p "$GCLOUD_SERVICE_KEY" https://gcr.io/test6u3411ty6xqh462sri/codecov-deploy:latest
            make -f Makefile.circle pull-latest
            echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKER_USERNAME" --password-stdin
            make -f Makefile.circle dockerhub-deploy-master

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - linter
      - build:
          context: "circleci google deploy context"
          filters:
            tags:
              only: /.*/
      - build-enterprise:
          context: "circleci google deploy context"
          requires:
            - build
          filters:
            branches:
              only:
                - master
            tags:
              only:
                - /enterprise-.*/
                - /qa-.*/
      - mutations:
          context: "circleci google deploy context"
          requires:
            - build
          filters:
            tags:
              only: /.*/
      - test:
          context: "circleci google deploy context"
          requires:
            - build
            - codecovstartup
          filters:
            tags:
              only: /.*/
      - iterativetesting:
          context: "circleci google deploy context"
          requires:
            - build
            - codecovstartup
          filters:
            tags:
              only: /.*/
      - codecovstartup:
          context: "circleci google deploy context"
          requires:
            - build
          filters:
            tags:
              only: /.*/
      - staging:
          context: "circleci google deploy context"
          requires:
            - build
            - test
          filters:
            branches:
              only:
                - master
                - staging
      - production:
          context: "circleci google deploy context"
          requires:
            - build
            - test
          filters:
            tags:
              only: "/^prod(uction)?-[0-9]{4}-[0-9]{2}-[0-9]{3,4}/"
            branches:
              only: production
      - enterprise:
          context:
            - "DockerHub Push Context"
            - "circleci google deploy context"
          requires:
            - build-enterprise
            - test
          filters:
            tags:
              only:
                - /^qa-.*/
                - /^enterprise-.*/
            branches:
              only: master
      - hold:
          type: approval
          requires:
            - enterprise
          filters:
            tags:
              only:
                - /^enterprise-.*/
            branches:
              ignore: /.*/
      - enterprise-release:
          context:
            - "DockerHub Push Context"
            - "circleci google deploy context"
          requires:
            - enterprise
            - hold
          filters:
            tags:
              only: /^enterprise-.*/
            branches:
              ignore: /.*/
      - deploy:
          context: "circleci google deploy context"
          requires:
            - build
            - test
          filters:
            branches:
              only: production
      - dockerhub:
          context:
            - "DockerHub Push Context"
            - "circleci google deploy context"
          requires:
            - build
            - test
            # - standards-coverage-comparison
          filters:
            branches:
              only: master

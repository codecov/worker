version: 2.1
executors:
  codecov-deploy:
    docker:
    - image: gcr.io/test6u3411ty6xqh462sri/codecov-deploy:latest
      user: root
      auth:
        username: _json_key
        password: $GCLOUD_SERVICE_KEY
    working_directory: /work
  codecov-worker:
    docker:
    - image: gcr.io/test6u3411ty6xqh462sri/codecov-worker:latest
      user: root
      auth:
        username: _json_key
        password: $GCLOUD_SERVICE_KEY
    - image: circleci/postgres:9.6.2
      name: postgres
    working_directory: /worker

gcloud_auth: &gcloud_auth
  name: Copy gcloud auth for docker push
  command: |-
    echo "$GCLOUD_SERVICE_KEY" > service.json
    gcloud auth activate-service-account --key-file=service.json
    gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
    gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
    gcloud auth configure-docker

gcloud_auth_enterprise: &gcloud_auth_enterprise
  name: Copy gcloud auth for docker push
  command: |-
    echo "$GCLOUD_SERVICE_KEY" > service.json
    gcloud auth activate-service-account --key-file=service.json
    gcloud --quiet config set project ${GOOGLE_ENTERPRISE_PROJECT_ID}
    gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
    gcloud auth configure-docker

jobs:
  linter:
    docker:
      - image: circleci/python:3.7.6
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Running linter
          command: |
            pip3 install -Iv black==19.10b0
            black --check .
  build:
    executor: codecov-deploy
    steps:
    - checkout
    - setup_remote_docker
    - run:
        <<: *gcloud_auth
    - run:
        name: build container
        command: |-
          make -f Makefile.circle build-requirements GH_ACCESS_TOKEN=$GH_ACCESS_TOKEN
          make -f Makefile.circle build VERSION=$CIRCLE_TAG
          make -f Makefile.circle push
  build-enterprise:
    executor: codecov-deploy
    steps:
      - checkout
      - setup_remote_docker
      - run:
          <<: *gcloud_auth_enterprise
      - run:
          name: build container
          command: |-
            make -f Makefile.circle build-requirements
            make -f Makefile.circle build-enterprise VERSION=$CIRCLE_TAG
            make -f Makefile.circle push-enterprise
  test:
    environment:
      SONARSCANNER_VERSION: "4.3.0.2102"
    executor: codecov-worker
    steps:
      - run:
          name: verify postgres is up
          command: |
            while ! nc -vz postgres 5432; do sleep 1; echo "waiting for postgres"; done
      - run:
          name: run tests
          command: |
            make test.unit
            make test.integration

      - run:
          name: codecov
          command: |
            apk add curl gnupg perl-utils
            curl https://keybase.io/codecovsecurity/pgp_keys.asc | gpg --import # One time step
            curl -Os https://uploader.codecov.io/v0.1.0_3844/codecov-alpine
            curl -Os https://uploader.codecov.io/v0.1.0_3844/codecov-alpine.SHA256SUM
            curl -Os https://uploader.codecov.io/v0.1.0_3844/codecov-alpine.SHA256SUM.sig
            gpg --verify codecov-alpine.SHA256SUM.sig codecov-alpine.SHA256SUM
            shasum -a 256 -c codecov-alpine.SHA256SUM
            chmod +x ./codecov-alpine
            ./codecov-alpine -R . -F integration -f integration.coverage.xml -Z
            ./codecov-alpine -R . -F unit -f unit.coverage.xml -Z

  staging:
    executor: codecov-deploy
    steps:
    - checkout
    - setup_remote_docker
    - run:
        <<: *gcloud_auth
    - run:
        name: docker build, tag, and upload to staging
        command: |
          make -f Makefile.circle staging

  production:
    executor: codecov-deploy
    steps:
    - checkout
    - setup_remote_docker
    - run:
        <<: *gcloud_auth
    - run:
        name: docker build, tag, and upload to production
        command: |
          make -f Makefile.circle production
  enterprise:
    executor: codecov-deploy
    steps:
      - checkout
      - setup_remote_docker
      - run:
          <<: *gcloud_auth_enterprise
      - run: echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKER_USERNAME" --password-stdin
      - run:
          name: docker build, tag, and upload to enterprise qa
          command: |
            make -B -f Makefile.circle enterprise
  enterprise-release:
    executor: codecov-deploy
    steps:
      - checkout
      - setup_remote_docker
      - run:
          <<: *gcloud_auth_enterprise
      - run: echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKER_USERNAME" --password-stdin
      - run:
          name: docker build, tag, and upload to enterprise qa
          command: |
            make -B -f Makefile.circle enterprise
            make -B -f Makefile.circle release-enterprise
  deploy:
    executor: codecov-deploy
    steps:
    - checkout
    - setup_remote_docker
    - run:
        <<: *gcloud_auth
    - run:
        name: tag for k8s
        command: |-
          make -f Makefile.circle tag
  
  dockerhub:
    executor: codecov-deploy
    steps:
      - checkout
      - setup_remote_docker
      - run: echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKER_USERNAME" --password-stdin
      - run: make dockerhub.deploy GH_ACCESS_TOKEN=$GH_ACCESS_TOKEN

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - linter
      - build:
          filters:
            tags:
              only: /.*/
      - build-enterprise:
          requires:
            - build
          filters:
            branches:
              only:
                - master
            tags:
              only:
                - /enterprise-.*/
      - test:
          requires:
            - build
          filters:
            tags:
              only: /.*/
      - staging:
          requires:
            - build
            - test
          filters:
            branches:
              only: master
      - production:
          requires:
            - build
            - test
          filters:
            tags:
              only: "/^prod(uction)?-[0-9]{4}-[0-9]{2}-[0-9]{3,4}/"
            branches:
              only: production
      - enterprise:
          context: "DockerHub Push Context"
          requires:
            - build-enterprise
            - test
          filters:
            branches:
              only: master
      - enterprise-release:
          context: "DockerHub Push Context"
          requires:
            - build-enterprise
            - test
            - enterprise
          filters:
            tags:
              only: /^enterprise-.*/
            branches:
              ignore: /.*/
      - deploy:
          requires:
            - build
            - test
          filters:
            branches:
              only: production
      - dockerhub:
          requires:
            - build
            - test
          filters:
            branches:
              only: master

-include .envrc

#GCLOUD_SERVICE_KEY := $(shell cat ~/.gcloud/codecov-enterprise-sandbox-03eb0a0ecaf2.json | base64 --wrap=0)
GCR_REPO := gcr.io/test6u3411ty6xqh462sri/codecov-worker
ENTERPRISE_GCR_REPO := gcr.io/codecov-enterprise-sandbox/codecov-worker
REQUIREMENTS_TAG := requirements-v04-$(shell sha1sum requirements.txt | cut -d ' ' -f 1)
SEMANTIC_VERSION := `cat VERSION`
IMAGE_VERSION := ${SEMANTIC_VERSION}-$(shell git rev-parse --short=7 HEAD)
ssh_private_key = `cat ~/.ssh/id_rsa`
VERSION := release-$(shell git rev-parse --short=7 HEAD)
name ?= worker

# CIRCLECI
# job: build
# builds an intermediate image with dependencies if there were changes to
# requirements.txt
build-requirements:
	# if docker pull succeeds, we have already build this version of
	# requirements.txt.  Otherwise, build and push a version tagged
	# with the hash of this requirements.txt
	docker pull ${GCR_REPO}:${REQUIREMENTS_TAG} || docker build \
		-f dockerscripts/Dockerfile.requirements . \
		-t ${GCR_REPO}:${REQUIREMENTS_TAG} \
		--build-arg SSH_PRIVATE_KEY="${ssh_private_key}" \
	&& docker push ${GCR_REPO}:${REQUIREMENTS_TAG}

# CIRCLECI
# job: build
# pulls intermediate dependencies image and adds app code
build:
	docker pull ${GCR_REPO}:${REQUIREMENTS_TAG}
	docker build \
		-f dockerscripts/Dockerfile.circle . \
		-t ${GCR_REPO}:latest \
		--build-arg REQUIREMENTS_IMAGE=${GCR_REPO}:${REQUIREMENTS_TAG} \
		--build-arg RELEASE_VERSION=${IMAGE_VERSION}

# CIRCLECI
# job: enterprise
# pulls intermediate dependencies image and adds app code.
build-enterprise:
	docker pull ${GCR_REPO}:${REQUIREMENTS_TAG}
	docker pull ${ENTERPRISE_GCR_REPO}:latest
	docker build \
		-f dockerscripts/Dockerfile.enterprise . \
		-t ${ENTERPRISE_GCR_REPO}:latest \
		--build-arg REQUIREMENTS_IMAGE=${GCR_REPO}:${REQUIREMENTS_TAG} \
		--build-arg RELEASE_VERSION=${IMAGE_VERSION} \
		--label "org.label-schema.build-date"="$(BUILD_DATE)" \
		--label "org.label-schema.name"="Self-Hosted Worker" \
		--label "org.label-schema.vendor"="Codecov" \
		--label "org.label-schema.version"="${IMAGE_VERSION}" \
		--squash

# CIRCLECI
# job: test
# used to push latest image tag after a successful test
push:
	docker push ${GCR_REPO}:latest

# CIRCLECI
# job: enterprise
# used to push latest image tag after a successful test
push-enterprise:
	docker push ${ENTERPRISE_GCR_REPO}:latest

# CIRCLECI
# job: deploy
# tags latest image with git tag
tag:
	docker pull ${GCR_REPO}:latest
	docker tag ${GCR_REPO}:latest ${GCR_REPO}:${VERSION}
	docker push ${GCR_REPO}:${VERSION}
	
# CIRCLECI
# Pulls Standards image for coverage comparison from autotest
run-standards-comparison:
	docker pull codecov/autotest:standards-latest
	docker run --network autotest_codecov -e HOST_URL=http://web.local:5000 codecov/autotest:standards-latest

# CIRCLECI
# job: standards-coverage-comparison
# used to pull latest image tag after a build.portablesuccessful build
pull-latest:
	docker pull ${GCR_REPO}:latest
	docker tag ${GCR_REPO}:latest codecov/$(name):latest

# build and tag with staging tag
# - when the docker image is uploaded to GCR with the "staging" tag, spinnaker will automatically detect the new image and deploy to the staging k8s cluster
# - spinnaker pipeline: https://spinnaker.codecov.dev/?to=https%3A%2F%2Fspinnaker.codecov.dev%2F%23%2Fsearch#/applications/codecov-staging/executions?pipeline=worker
staging:
	docker build \
		-f  dockerscripts/Dockerfile.circle . \
		-t ${GCR_REPO}:staging-${VERSION} \
		--build-arg RELEASE_VERSION=${IMAGE_VERSION} \
		--build-arg REQUIREMENTS_IMAGE=${GCR_REPO}:${REQUIREMENTS_TAG} && \
	docker push ${GCR_REPO}:staging-${VERSION}

# build and tag with production tag
# - when the docker image is uploaded to GCR with the "production" tag, spinnaker will automatically detect the new image and deploy to the production k8s cluster
# - spinnaker pipeline: https://spinnaker.codecov.dev/?to=https%3A%2F%2Fspinnaker.codecov.dev%2F%23%2Fsearch#/applications/codecov-production/executions?pipeline=worker
production:
	docker build \
		-f  dockerscripts/Dockerfile.circle . \
		-t ${GCR_REPO}:production-${VERSION} \
		--build-arg RELEASE_VERSION=${IMAGE_VERSION} \
		--build-arg REQUIREMENTS_IMAGE=${GCR_REPO}:${REQUIREMENTS_TAG} && \
	docker push ${GCR_REPO}:production-${VERSION}

# LOCAL
# used to test circleci jobs
# example$ make circleci-local JOB=build
circleci-local:
	circleci local execute \
		-c .circleci/local.yml \
		--job ${JOB} \
		--env GH_ACCESS_TOKEN=${GH_ACCESS_TOKEN} \
		--env GCLOUD_SERVICE_KEY=${GCLOUD_SERVICE_KEY} \
		--env GOOGLE_COMPUTE_ZONE=us-east4 \
		--env GOOGLE_PROJECT_ID=codecov-enterprise-sandbox \
		--env VERSION=${VERSION}

# LOCAL
# use locally to tag a new release version.  
# this will trigger a build/test/deployment on circle ci
release:
	git checkout master
	git pull
	git tag ${VERSION}
	git push --tags

# CIRCLECI
# job: enterprise
# deploys tagged version of the private enterprise-api
enterprise:
	docker pull ${ENTERPRISE_GCR_REPO}:latest
	docker tag ${ENTERPRISE_GCR_REPO}:latest ${ENTERPRISE_GCR_REPO}:${IMAGE_VERSION}
	docker tag ${ENTERPRISE_GCR_REPO}:latest codecov/worker-private:${IMAGE_VERSION}
	docker push ${ENTERPRISE_GCR_REPO}:${IMAGE_VERSION}
	docker push codecov/worker-private:${IMAGE_VERSION}

# CIRCLECI
# job: enterprise-release
# deploys tagged version of the public enterprise-api
release-enterprise:
	docker pull ${ENTERPRISE_GCR_REPO}:${IMAGE_VERSION}
	docker tag ${ENTERPRISE_GCR_REPO}:${IMAGE_VERSION} codecov/enterprise-worker:${SEMANTIC_VERSION}
	docker tag ${ENTERPRISE_GCR_REPO}:${IMAGE_VERSION} codecov/enterprise-worker:latest-stable
	docker push codecov/enterprise-worker:${SEMANTIC_VERSION}
	docker push codecov/enterprise-worker:latest-stable
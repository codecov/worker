import typing
from typing import Any, Callable, Mapping

from shared.reports.resources import Report

from services.report.report_builder import ReportBuilder


class BaseLanguageProcessor(object):
    @property
    def name(self):
        return self.get_processor_name()

    def __init__(self, *args, **kwargs) -> None:
        pass

    def matches_content(self, content: Any, first_line: str, name: str) -> bool:
        """
        Determines whether this processor is capable of processing this file.

        This is meant to be a high-level verification, and should not go through the whole file
            to extensively check if everything is correct.

        One example here is to check something on the first line, or check if a
            certain key is present at the top-level json and has the right type of value under
            it. Or maybe if a certain set ot XML tags that are unique to this format are here.

        As long as this file can make sure to not accidentally try to parse formats that
            belong with other processors, it is not a big deal (for now)

        Args:
            content (Any): The actual report content
            first_line (str): The first line of the report, as a string
            name (str): The filename of the report (as provided by the upload)
        Returns:
            bool: True if we can read this file, False otherwise
        """
        pass

    def process(
        self, name: str, content: typing.Any, report_builder: ReportBuilder
    ) -> Report:
        """Processes a report uploaded by the user, returning a `Report`

        This is the base function which we need to implement

        Args:
            content (str): The user uploaded report, as generated by the bash-uploader
            path_fixer (Callable): A callable that receives a function that fixes a path
            ignored_lines (Mapping[str, dict]): A dict indicating which lines on which files
                are to be ignored, in the format:
                {
                    'filename': {
                        'eof': 40, 'lines': {40, 33, 37, 38}
                    },
                }
            sessionid (str): An identifier for the current sessionid
        Returns:
            Report: A report with the processed data from the report
        Raises:
            ReportExpiredException: If the report is considered expired
        """
        pass

    @classmethod
    def get_processor_name(cls) -> str:
        return cls.__name__

import sentry_sdk
from shared.reports.resources import Report

from services.report.languages.base import BaseLanguageProcessor
from services.report.report_builder import (
    CoverageType,
    ReportBuilder,
    ReportBuilderSession,
)


class SimplecovProcessor(BaseLanguageProcessor):
    """
    Handles processing of coverage reports generated by Simplecov (https://github.com/simplecov-ruby/simplecov)
    The JSON formatter this processor expects is simplecov-json (https://github.com/vicentllongo/simplecov-json)

    """

    def matches_content(self, content: dict, first_line: str, name: str) -> bool:
        return isinstance(content, dict) and content.get("command_name") == "RSpec"

    @sentry_sdk.trace
    def process(
        self, name: str, content: dict, report_builder: ReportBuilder
    ) -> Report:
        report_builder_session = report_builder.create_report_builder_session(name)
        return from_json(content, report_builder_session)


def from_json(json: dict, report_builder_session: ReportBuilderSession) -> Report:
    ignored_lines = report_builder_session.ignored_lines
    for data in json["files"]:
        fn = report_builder_session.path_fixer(data["filename"])
        if fn is None:
            continue

        report_file_obj = report_builder_session.file_class(
            fn, ignore=ignored_lines.get(fn)
        )

        # Structure depends on which Simplecov version was used so we need to handle either structure
        coverage = data["coverage"]
        coverage_to_check = (
            coverage["lines"]
            if isinstance(coverage, dict)
            and coverage.get("lines")  # Simplecov version >= 0.18
            else coverage  # Simplecov version < 0.18
        )

        for ln, cov in enumerate(coverage_to_check, start=1):
            report_file_obj[ln] = report_builder_session.create_coverage_line(
                filename=fn, coverage=cov, coverage_type=CoverageType.line
            )

        report_builder_session.append(report_file_obj)

    return report_builder_session.output_report()
